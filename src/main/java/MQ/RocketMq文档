1.高吞吐量：顺序读写
2.高可用：集群

消息发送：1.单向，2，可靠同步 3.可靠异步

消费者两种模式：推模式和拉模式

规避原则：生产者在拿到broker列表以后会以轮询的方式往不同的队列发送消息，如果某一个消息发送失败，生产者就会把这个broker排除。
        虽然此时缓存的服务列表还有该broker（生产者默认每30s更新一次服务列表，但是nameService每10s进行一次心跳检测，所以会存在broker挂了，nameservice也检测到了并更新了broker列表，但是生产这个还没更新缓存）

消费：
    集群消费：多个消费者，那不同的消息消费
    广播消费： 每个消费者消费所有消息

    消费方式：
        拉模式： 所有的事情都需要自己解决，包括保存偏移量等。
        推模式： 封装拉模式以长轮询的方式接收数据。
                长轮询：消费者发起长连接，服务端在接收到长连接以后，在一段时间里面通过这个连接将消息推送给消费者。
                流量控制：为了防止消息在消费端堆积，需要在长轮询拉取数据的时候设置一个阈值，已达到流量控制
                消息队列负载均衡和重新分配机制：
                        消息队列负载均衡(5种)：1.平均分配 2.平均轮询分配 3.hash一致性 4.固定分配 5.按照broker
                        重新分配机制：RebalanceService每隔20s进行一次重新分配，将新增的队列分配到消费者上
                消息确认ACK： rocketMq抛弃单条数据的ack机制，每次ack一批数据（取决于你每次接收多少数据），假如有100条数据，成功消费99条，最后一条没消费的情况下，消费者挂掉了。你这个
                             批消息就都没有ack，rocketMq会保证最少一次消费，所以会将数据放在重新投递队列，在一段时间后进行重新投递。由此可以看出前99条消息就会被再次消费，所以rocketMq
                             不保证消费的幂等性，需要消费者自行处理（通过写表或者通过redis缓存key等方式都行）
    消息进度：
                广播模式下所有的消费者都需要消费所有消息，所以进度保存在消费者本地
                集群消费模式下进度会同步到broker服务器。
    顺序消息： 全局顺序，只能有一个队列，一个消费者。吞吐量大幅度降低
              分区顺序
    延时消息： 只支持固定时间延时
    消息过滤： tag

消息存储：主要是commitLog、consumeQueue、indexFile
         commitLog: 每个topic会有一个该文件，用于消息内容的存储，每个队列共享该文件。
         consumeQueue：消息消费队列，消息到达commitLog后，将异步转发到消息消费队列，供消费者消费。
         IndexFile： 消费索引文件，主要存储消息key和偏移量的对应关系。根据消息id查找消息
         rocketMQ引入consumeQueue消息消费队列，每个消息主题包含多个消费消息队列，每个消息队列有一个消息索引文件，主要是为了加速消息的检索性能。
         consumeQueue存储发送到该队列的消息的偏移量，tag等信息，方便从commitLog文件中检索真正的消息

文件刷盘机制：
        同步刷盘：每次发送消息以后会在刷盘动作完后菜返回结果。  性能降低
        异步刷盘：每次发送消息到内存以后就返回结果，异步刷盘线程会定时启动将数据刷写到磁盘，会存在少量数据丢失

事务消息：
        rocketMQ采用2pc的方式实现事务消息。
        1.生产者先发送事务消息到broker，broker会把事务消息放在halfTopic，返回响应
        2.生产者开始执行事务，
        3.根据生产这个事务的执行情况，发送commit或者rollback， 如果是commit 就会把消息从halfTopic放到真正的Topic，进行消费。如果是rollback就丢弃
        4.如果一直得不到生产者的响应，broker就会发起一次回查，让生产者群群组里面的任意生产者进行确认commit或者rollback

主从同步机制（高可用）：
        单Master节点
        多Master
        多Master多slave（异步复制，同步复制）

        异/同步复制 只的是主从节点之间数据的复制
        异/同步刷盘 只的是单节点上数据的持久化

限时订单：
        1.扫描数据库表？  性能浪费，而且实时性差
        2.本地容器存储？  delayQuery延迟队列可以实现，但是如果服务重启消息就会丢失，
        3.使用RocketMQ的延时消息就行处理  利用RomcketMQ的高可用，低延时的特性可以很好解决刚才的问题，到时间就让消费者消费处理。