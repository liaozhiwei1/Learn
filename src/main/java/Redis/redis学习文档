redis 5种数据结构：
    String : key - String
        redis 分布式锁
    hash:  key - map
    list: key - list
    set: key - set
    zset： key - set(map)
redis持久化备份：
       方式：
        1.RDB:
            保存数据
            执行：
               1.bgSave : 后台备份，会开启子线程处理备份请求
               2.save： 主线程直接处理备份请求，阻塞时间较长。生产不建议使用
            优点：压缩后的二进制文，适用于备份，全量复制，用于灾难恢复     加载RDB恢复数据远快于AOF恢复数据
            缺点：无法做到实施持久化，每次需要创建子线程。  老版本的RDB备份文件不兼容新版本
        2.AOF:
            保存执行的指令
            执行：
                自动执行，可以设置执行计划
缓存：
       缓存击穿：偶一个热点key失效，导致大量请求到数据库，造成数据库崩溃 解决方案：1、加锁
       缓存雪崩：缓存集中在某一短时间失效，导致大量请求到数据库，造成数据库崩溃     解决方案：1、加锁、限流 2、缓存预热 3、被动失效--》主动失效
       缓存穿透：查询数据库不存在的数据，导致大量请求到数据库，造成数据库崩溃   解决方案：布隆过滤器

分布式事务:
    ACID: 原子性 、一致性 、隔离性、持久化
    刚性事务：严格遵守ACID原则。    2pc协议。协调者先向参与者发送预处理请求，等待参与者完全返回。再发送全局提交通知。  若参与者长时间未收到协调者的全局提交通知，会导致数据库资源长时间的不到释放。
    柔性事物：BASE理论，保证业务可用性，可以忍受中间态不一致，最终结果一致。  tcc：

redis慢查询:


redis分布式架构:
        1、主从模式:
            启动流程: 从节点启动以后，首先保存主节点信息--> 建立socket连接 ----> ping主节点 ---->验证权限 ----> 全量复制数据 ----> 持续复制
                     主节点需要持续，心跳检测从节点。

            问题:主节点宕机不存在自动切换。需要手动配置

        2、哨兵模式:
            哨兵节点通过心跳检测ping等方式 出现主观下线(某个redis节点响应某个哨兵节点查过配置的时间)发现这个情况的哨兵节点会发起请求要求其他哨兵节点给出检测结果，
            如果哨兵节点给出的投票结果超过半数，则该redis节点会变成客观下线，如果这个redis节点是从节点，则流程结束。如果该节点是主节点，则启动故障庄毅流程。
            主观下线: 单个哨兵认为节点出现错误，认为该节点已经下线。
            客观下线：多数哨兵认为某个节点主观下线。就会客观下线（真正意义上的下线）
            故障转移流程: 由率先主观下线的哨兵节点担任 故障转移leader进行故障转移 将从节点从主节点脱离，然后选一个从节点为主节点，其他从节点改变主节点。然后通知应用程序

            哨兵节点选择主节点流程 ：见图 哨兵节点选取redis主节点流程.png

            哨兵应部署多台物理机，数量应该大于三且要为奇数。

        3.集群模式:
            概念：分布式数据库把整个数据按照分区规则映射到多个节点，即把数据划分到多个节点上，每个节点负责整个数据集的子集。
            分区：采用对 HASH()=CRC16[key]&16383  ，计算槽位。CRC[key] 计算摘要，一共有16384个槽。按照计算出来的值选择槽。
