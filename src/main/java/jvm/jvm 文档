1.双亲委派: 自定义类加载器 -->  应用类加载器  ---> 扩展类加载器  --->  引导类加载器
    为什么要使用双亲委派机制？  为了保证安全，防止用户重写java核心类

2.jmm物理或逻辑结构:


3.内存分配：见图
    栈上分配：1.逃逸分析：一个变量是否跨方法（外部线程是否可见）
             2.标量替换：一个变量全部由基本数据类型组成，可以拆分为所有的基本数据类型
    TLAB:在堆上，每个线程有一小块线程独立的内存空间，这样使得内存分配不需要加锁

4.如何定位垃圾：引用计数算法、根可达算法

5.垃圾清除算法：标记清除算法(位置不连续且两遍扫描，效率低)、复制算法(没有碎片，但是存在内存浪费)、标记压缩(没有碎片,两遍扫描效率低)

6.垃圾收集器: 年轻代： serial     parallelScavenge   parNew    G1(使用逻辑分区，不在存在真正的物理分区)
            老年代:  SerialOld     parallelOld       CMS      G1

            serial 用于年轻代 串行回收  工作线程 --> 回收线程（单线程）
            parallelScavenge  用于年轻代 并行回收 工作线程 --> 回收线程（多线程）
            parNew  用于年轻代 并行回收
            CMS 并行回收，应用线程和回收线程同时工作。以降低stw的时间  工作线程和回收线程同时进行

7.调优：
    1.jvm规划和预调优
        1: 熟悉业务场景。 响应时间优先（CMS、G1、ZGC）、吞吐量优先（parallelScavenge+parallelOld）
        2：选择回收期组合
        3：计算内存需求
        4：选定cpu
        5：设定年代大小以及升级年代的条件
        6：设置日志参数      -Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogfileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause
        7：观察日志
    2. 优化环境
        1.系统cpu经常100% 如何调优?
            定位线程(top) --> 导出堆栈(jstack) --> 定位方法(栈帧)
        2.内存飙高，如何排查问题?
            导出堆内存(jmap) --> 分析(jhat mat jvisualvm)
    3.解决oom
        jmap -dump:format=b,file=<pid>  堆转储存命令对程序 影响很大，不建议使用除非已经隔离服务器 jmap -histo <pid> 查看命令  -XX:+HeapDumpOnOutOfMemoryError 产生oom自动堆转储
        jstack <pid>
        jhat 对hprof文件进行分析
    4.使用arthas进行项目监控
        https://arthas.aliyun.com/doc/commands.html

8.案例
    1.
        现象：程序响应缓慢
        操作：查看gc日志，发现Fgc十分频繁  怀疑是内存过小导致gc频繁，当时的内存是2G
        现象：增加内存至4g，后系统响应变快，但是存在卡顿现象。
        操作：查看gc日志，发现Fgc时间长  怀疑是因为增加内存后，虽然减少了Fgc的次数，但是每次Fgc需要清理的内存变大，导致stw时间变长。
                查看当时的GC收集器，发现使用的是ps+po的收集器，这种串行收集器会暂停用户线程，执行GC线程
                尝试改用G1收集器，这种收集器摒弃原有收集器的物理分区，直接将内存分为多个小块，用满就收集。这样就不会暂停用户线程

        最后，系统正常运行。目前没有观察到异常
    2.
        现象：应用程序经常出现oom。
        操作：使用jhat命令 对hprof文件进行分析，发现有存在多个Http11OutputBuffer对象并且每个Http11OutputBuffer对象都占用了大量的
                字节，经过跟踪发现Http11OutputBuffer属于tomcat的请求输出缓冲区，最终查到了再配置文件中不知道哪位同事给max-header-size设置了
                一个很大的值。

G1垃圾回收器：
        1。放弃原有的年轻代，老年代的物理分区，将整个堆内存分为多个内存小块。小块也会被标记为年轻代，survivor，老年代等分区。
        2.采用复制-整理算法和复制算法

        年轻代回收（youngGC）STW （通过控制年轻代的）:
            1.扫描根：扫描GCROOT，根寻址算法找出存活对象，并标记
            2.根据dirty card queue 中的card更新Rset(Rset能够准确的对象引用关系)
            3.处理Rset   被老年代对象指向的对象也是存活对象
            4.使用引用复制算法进行回收

         并发标记（当堆空间占用达到阈值，默认为45%）:
            1.初始化标志  stw：扫描GCRoot直接可达对象
            2.根区域扫描：扫描幸存者区到老年代的引用,必须要youngGC之前完成，因为youngGc会改变幸存者区
            3.并发标记过程：在整个堆中进行并发标记，遇到整个内存块都是垃圾对象的情况会直接回收，其他的则是记录存活率，可能会被youngGC打断
            4.再次标记：补充之前并发标记过程中产生的垃圾对象
            5.独占清理 stw：此阶段并不会真的清理垃圾，而是更具回收价值进行排序
            6.并发清理:






一次G1垃圾回收的全过程
0.162: [GC pause (G1 Evacuation Pause) (young), 0.0210038 secs]
   [Parallel Time: 20.3 ms, GC Workers: 10]
      //开始GC
      [GC Worker Start (ms): Min: 162.1, Avg: 162.2, Max: 162.2, Diff: 0.1]
      //扫描Roots
      [Ext Root Scanning (ms): Min: 0.1, Avg: 0.1, Max: 0.4, Diff: 0.3, Sum: 1.3]
      //更新Rset（Remembered set）
      //根据dirty card queue 中的card更新Rset 引用赋值的时候需要向dirty card queue队列入队一个保存了对象信息的crad。所以Rset可以准确的反应对象引用关系
      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]
         [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]
       //扫描Rset对应的分区  避免扫描老年代，但是在这个阶段由于Rs已经更新完成，所以如果还出现其他垃圾的话就只能下次再回收，这些垃圾称为浮动垃圾
      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]
      //扫描code root   code root是指在JIT进行优化以后缓存起来的代码所引用的对象
      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]
      //复制算法进行垃圾回收
      [Object Copy (ms): Min: 19.8, Avg: 20.0, Max: 20.0, Diff: 0.2, Sum: 199.6]
      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]
         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 10]
      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]
      [GC Worker Total (ms): Min: 20.1, Avg: 20.1, Max: 20.2, Diff: 0.1, Sum: 201.5]
      [GC Worker End (ms): Min: 182.3, Avg: 182.3, Max: 182.3, Diff: 0.0]
    //将code root修正到正确的内存区间
   [Code Root Fixup: 0.0 ms]
   //清除修正之前的分区内存
   [Code Root Purge: 0.0 ms]
   //清除Rset
   [Clear CT: 0.1 ms]
   [Other: 0.6 ms]
      [Choose CSet: 0.0 ms]
      [Ref Proc: 0.5 ms]
      [Ref Enq: 0.0 ms]
      [Redirty Cards: 0.1 ms]
      [Humongous Register: 0.0 ms]
      [Humongous Reclaim: 0.0 ms]
      [Free CSet: 0.0 ms]
   [Eden: 24.0M(24.0M)->0.0B(12.0M) Survivors: 0.0B->3072.0K Heap: 24.0M(50.0M)->20.9M(50.0M)]


   jvm调优
   1.线上环境 arthas工具
   2。调优过程:
        确定场景：用户反馈系统卡顿，而且卡顿的时间点都是在大批量任务进行的时间节点
        分析原因：每个任务一次处理200张原图，每条数据字段比较多，大概2kb，200条数据就是400kb，任务高发期，大概30个任务同时进行，就是12m。
                 当然不仅仅是只有图像处理任务在运行，还有其他数据，就是24M，每秒产生20M的垃圾对象，大约持有2-3秒，600M的只需要30S，最后2-3s产生的内存无法回收
                 大概60M  幸存者区100M会因为动态对象年龄判断直接进入老年代，每30s就会产生60M的对象进入老年代，也就是十多分钟就会产生一次fullGc
        解决方案：调整年轻代的内存大小。或者 更改垃圾回收器